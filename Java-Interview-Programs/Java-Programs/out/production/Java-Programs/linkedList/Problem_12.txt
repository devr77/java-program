Method 1(Simply use two loops) 
Use 2 nested for loops. The outer loop will be for each node of the 1st linkedList.list and inner loop will be for 2nd linkedList.list. In the inner loop, check if any of nodes of the 2nd linkedList.list is same as the current node of the first linked linkedList.list. The time complexity of this method will be O(M * N) where m and n are the numbers of nodes in two lists.

Method 2 (Mark Visited Nodes) 
This solution requires modifications to basic linked linkedList.list data structure. Have a visited flag with each node. Traverse the first linked linkedList.list and keep marking visited nodes. Now traverse the second linked linkedList.list, If you see a visited node again then there is an intersection point, return the intersecting node. This solution works in O(m+n) but requires additional information with each node. A variation of this solution that doesn’t require modification to the basic data structure can be implemented using a hash. Traverse the first linked linkedList.list and store the addresses of visited nodes in a hash. Now traverse the second linked linkedList.list and if you see an address that already exists in the hash then return the intersecting node.



Method 3(Using difference of node counts) 

Get count of the nodes in the first linkedList.list, let count be c1.
Get count of the nodes in the second linkedList.list, let count be c2.
Get the difference of counts d = abs(c1 – c2)
Now traverse the bigger linkedList.list from the first node till d nodes so that from here onwards both the lists have equal no of nodes
Then we can traverse both the lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)
Below image is a dry run of the above approach:



Below is the implementation of the above approach :

C++
C
Java
// Java program to get intersection point of two linked linkedList.list
  
class LinkedList {
  
    static Node head1, head2;
  
    static class Node {
  
        int data;
        Node next;
  
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
  
    /*function to get the intersection point of two linked
    lists head1 and head2 */
    int getNode()
    {
        int c1 = getCount(head1);
        int c2 = getCount(head2);
        int d;
  
        if (c1 > c2) {
            d = c1 - c2;
            return _getIntesectionNode(d, head1, head2);
        }
        else {
            d = c2 - c1;
            return _getIntesectionNode(d, head2, head1);
        }
    }
  
    /* function to get the intersection point of two linked
     lists head1 and head2 where head1 has d more nodes than
     head2 */
    int _getIntesectionNode(int d, Node node1, Node node2)
    {
        int i;
        Node current1 = node1;
        Node current2 = node2;
        for (i = 0; i < d; i++) {
            if (current1 == null) {
                return -1;
            }
            current1 = current1.next;
        }
        while (current1 != null && current2 != null) {
            if (current1.data == current2.data) {
                return current1.data;
            }
            current1 = current2;
            current2 = current2.next;
        }
  
        return -1;
    }
  
    /*Takes head pointer of the linked linkedList.list and
    returns the count of nodes in the linkedList.list */
    int getCount(Node node)
    {
        Node current = node;
        int count = 0;
  
        while (current != null) {
            count++;
            current = current.next;
        }
  
        return count;
    }
  
    public static void main(String[] args)
    {
        LinkedList linkedList.list = new LinkedList();
  
        // creating first linked linkedList.list
        linkedList.list.head1 = new Node(3);
        linkedList.list.head1.next = new Node(6);
        linkedList.list.head1.next.next = new Node(9);
        linkedList.list.head1.next.next.next = new Node(15);
        linkedList.list.head1.next.next.next.next = new Node(30);
  
        // creating second linked linkedList.list
        linkedList.list.head2 = new Node(10);
        linkedList.list.head2.next = new Node(15);
        linkedList.list.head2.next.next = new Node(30);
  
        System.out.println("The node of intersection is " + linkedList.list.getNode());
    }
}
  
// This code has been contributed by Mayank Jaiswal
Python3
C#
Javascript
Output
The node of intersection is 15
Time Complexity: O(m+n) 
Auxiliary Space: O(1)

Method 4(Make circle in first linkedList.list)
Thanks to Saravanan Man for providing below solution. 
1. Traverse the first linked linkedList.list(count the elements) and make a circular linked linkedList.list. (Remember the last node so that we can break the circle later on).
2. Now view the problem as finding the loop in the second linked linkedList.list. So the problem is solved.
3. Since we already know the length of the loop(size of the first linked linkedList.list) we can traverse those many numbers of nodes in the second linkedList.list, and then start another pointer from the beginning of the second linkedList.list. we have to traverse until they are equal, and that is the required intersection point.
4. remove the circle from the linked linkedList.list.

Time Complexity: O(m+n) 
Auxiliary Space: O(1)



Method 5 (Reverse the first linkedList.list and make equations)
Thanks to Saravanan Mani for providing this method.  

1) Let X be the length of the first linked linkedList.list until intersection point.
   Let Y be the length of the second linked linkedList.list until the intersection point.
   Let Z be the length of the linked linkedList.list from the intersection point to End of
   the linked linkedList.list including the intersection node.
   We Have
           X + Z = C1;
           Y + Z = C2;
2) Reverse first linked linkedList.list.
3) Traverse Second linked linkedList.list. Let C3 be the length of second linkedList.list - 1.
     Now we have
        X + Y = C3
     We have 3 linear equations. By solving them, we get
       X = (C1 + C3 – C2)/2;
       Y = (C2 + C3 – C1)/2;
       Z = (C1 + C2 – C3)/2;
      WE GOT THE INTERSECTION POINT.
4)  Reverse first linked linkedList.list.
Advantage: No Comparison of pointers. 
Disadvantage: Modifying linked linkedList.list(Reversing linkedList.list).
Time complexity: O(m+n) 
Auxiliary Space: O(1)

Method 6 (Traverse both lists and compare addresses of last nodes) This method is only to detect if there is an intersection point or not. (Thanks to NeoTheSaviour for suggesting this)  

1) Traverse the linkedList.list 1, store the last node address
2) Traverse the linkedList.list 2, store the last node address.
3) If nodes stored in 1 and 2 are same then they are intersecting.
The time complexity of this method is O(m+n) and used Auxiliary space is O(1)

Method 7 (Use Hashing) 
Basically, we need to find a common node of two linked lists. So we hash all nodes of the first linkedList.list and then check the second linkedList.list.
1) Create an empty hash set. 
2) Traverse the first linked linkedList.list and insert all nodes’ addresses in the hash set.
3) Traverse the second linkedList.list. For every node check if it is present in the hash set. If we find a node in the hash set, return the node.

Java
// Java program to get intersection point of two linked linkedList.list
import java.util.*;
class Node {
    int data;
    Node next;
    Node(int d)
    {
        data = d;
        next = null;
    }
}
class LinkedListIntersect {
    public static void main(String[] args)
    {
        // linkedList.list 1
        Node n1 = new Node(1);
        n1.next = new Node(2);
        n1.next.next = new Node(3);
        n1.next.next.next = new Node(4);
        n1.next.next.next.next = new Node(5);
        n1.next.next.next.next.next = new Node(6);
        n1.next.next.next.next.next.next = new Node(7);
        // linkedList.list 2
        Node n2 = new Node(10);
        n2.next = new Node(9);
        n2.next.next = new Node(8);
        n2.next.next.next = n1.next.next.next;
        Print(n1);
        Print(n2);
        System.out.println(MegeNode(n1, n2).data);
    }
  
    // function to print the linkedList.list
    public static void Print(Node n)
    {
        Node cur = n;
        while (cur != null) {
            System.out.print(cur.data + "  ");
            cur = cur.next;
        }
        System.out.println();
    }
  
    // function to find the intersection of two node
    public static Node MegeNode(Node n1, Node n2)
    {
        // define hashset
        HashSet<Node> hs = new HashSet<Node>();
        while (n1 != null) {
            hs.add(n1);
            n1 = n1.next;
        }
        while (n2 != null) {
            if (hs.contains(n2)) {
                return n2;
            }
            n2 = n2.next;
        }
        return null;
    }
}
C#
Javascript
Output
1  2  3  4  5  6  7  
10  9  8  4  5  6  7  
4
This method required O(n) additional space and not very efficient if one linkedList.list is large.
 

Method 8( 2-pointer technique ):

Using Two pointers : 

Initialize two pointers ptr1 and ptr2  at the head1 and  head2.
Traverse through the lists,one node at a time.
When ptr1 reaches the end of a linkedList.list, then redirect it to the head2.
similarly when ptr2 reaches the end of a linkedList.list, redirect it the head1.
Once both of them go through reassigning, they will be equidistant from 
 the collision point
If at any node ptr1 meets ptr2, then it is the intersection node.
After second iteration if there is no intersection node it returns NULL.
C++
Java
// JAVA program to print intersection of lists
  
import java.util.*;
  
class GFG{
  
/* Link linkedList.list node */
static class Node {
    int data;
    Node next;
};
  
// A utility function to return  intersection node
static Node intersectPoint(Node head1, Node head2)
{
    // Maintaining two pointers ptr1 and ptr2
    // at the head of A and B,
    Node ptr1 = head1;
    Node ptr2 = head2;
  
    // If any one of head is null i.e
    // no Intersection Point
    if (ptr1 == null || ptr2 == null) {
  
        return null;
    }
  
    // Traverse through the lists until they
    // reach Intersection node
    while (ptr1 != ptr2) {
  
        ptr1 = ptr1.next;
        ptr2 = ptr2.next;
  
        // If at any node ptr1 meets ptr2, then it is
        // intersection node.Return intersection node.
  
        if (ptr1 == ptr2) {
  
            return ptr1;
        }
        /* Once both of them go through reassigning,
        they will be equidistant from the collision point.*/
  
        // When ptr1 reaches the end of a linkedList.list, then
        // reassign it to the head2.
        if (ptr1 == null) {
  
            ptr1 = head2;
        }
        // When ptr2 reaches the end of a linkedList.list, then
        // redirect it to the head1.
        if (ptr2 == null) {
  
            ptr2 = head1;
        }
    }
  
    return ptr1;
}
  
// Function to print intersection nodes
// in  a given linked linkedList.list
static void print(Node node)
{
    if (node == null)
        System.out.print("null");
    while (node.next != null) {
        System.out.print(node.data+ ".");
        node = node.next;
    }
    System.out.print(node.data);
}
    
// Driver code
public static void main(String[] args)
{
    /*
    Create two linked lists
  
    1st Linked linkedList.list is 3.6.9.15.30
    2nd Linked linkedList.list is 10.15.30
  
    15 30 are elements in the intersection linkedList.list
    */
  
    Node newNode;
    Node head1 = new Node();
    head1.data = 10;
    Node head2 = new Node();
    head2.data = 3;
    newNode = new Node();
    newNode.data = 6;
    head2.next = newNode;
    newNode = new Node();
    newNode.data = 9;
    head2.next.next = newNode;
    newNode = new Node();
    newNode.data = 15;
    head1.next = newNode;
    head2.next.next.next = newNode;
    newNode = new Node();
    newNode.data = 30;
    head1.next.next = newNode;
    head1.next.next.next = null;
    Node intersect_node = null;
  
    // Find the intersection node of two linked lists
    intersect_node = intersectPoint(head1, head2);
  
    System.out.print("INTERSEPOINT LIST :");
  
    print(intersect_node);
}
}
  
// This code is contributed by umadevi9616. 
Output
INTERSEPOINT LIST :15->30
Time complexity : O( m + n ) 
Auxiliary Space:  O(1)