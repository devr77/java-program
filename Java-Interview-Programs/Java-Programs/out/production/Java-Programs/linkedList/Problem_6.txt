
Recursive Approach :  

C++
C
Java
// Java Program to remove duplicates
// from a sorted linked linkedList.list
class GFG
{
/* Link linkedList.list node */
static class Node
{
    int data;
    Node next;
};
 
// The function removes duplicates
// from a sorted linkedList.list
static Node removeDuplicates(Node head)
{
    /* Pointer to store the pointer
    of a node to be deleted*/
    Node to_free;
     
    /* do nothing if the linkedList.list is empty */
    if (head == null)
        return null;
 
    /* Traverse the linkedList.list till last node */
    if (head.next != null)
    {
         
        /* Compare head node with next node */
        if (head.data == head.next.data)
        {
            /* The sequence of steps is important.
            to_free pointer stores the next of head
            pointer which is to be deleted.*/
            to_free = head.next;
            head.next = head.next.next;
            removeDuplicates(head);
        }
         
        /* This is tricky: only advance if no deletion */
        else
        {
            removeDuplicates(head.next);
        }
    }
    return head;
}
 
/* UTILITY FUNCTIONS */
/* Function to insert a node at the beginning
of the linked linkedList.list */
static Node push(Node head_ref,
                 int new_data)
{
    /* allocate node */
    Node new_node = new Node();
             
    /* put in the data */
    new_node.data = new_data;
                 
    /* link the old linkedList.list off the new node */
    new_node.next = (head_ref);    
         
    /* move the head to point to the new node */
    (head_ref) = new_node;
    return head_ref;
}
 
/* Function to print nodes in a given linked linkedList.list */
static void printList(Node node)
{
    while (node != null)
    {
        System.out.print(" " + node.data);
        node = node.next;
    }
}
 
/* Driver code*/
public static void main(String args[])
{
    /* Start with the empty linkedList.list */
    Node head = null;
     
    /* Let us create a sorted linked linkedList.list
    to test the functions
    Created linked linkedList.list will be 11.11.11.13.13.20 */
    head = push(head, 20);
    head = push(head, 13);
    head = push(head, 13);
    head = push(head, 11);
    head = push(head, 11);
    head = push(head, 11);                                    
 
    System.out.println("Linked linkedList.list before" +
                      " duplicate removal ");
    printList(head);
 
    /* Remove duplicates from linked linkedList.list */
    head = removeDuplicates(head);
 
    System.out.println("\nLinked linkedList.list after" +
                       " duplicate removal ");    
    printList(head);            
}
} 
 
// This code is contributed by Arnab Kundu
Python3
C#
Javascript
Output
Linked linkedList.list before duplicate removal  11 11 11 13 13 20
Linked linkedList.list after duplicate removal  11 13 20
Another Approach: Create a pointer that will point towards the first occurrence of every element and another pointer temp which will iterate to every element and when the value of the previous pointer is not equal to the temp pointer, we will set the pointer of the previous pointer to the first occurrence of another node.

Below is the implementation of the above approach:

C++14
Java
// Java program to remove duplicates
// from a sorted linked linkedList.list
class LinkedList
{
    // head of linkedList.list
    Node head;
  
    // Linked linkedList.list Node
    class Node
    {
        int data;
        Node next;
        Node(int d) {
          data = d;
          next = null;
        }
    }
 
    // Function to remove duplicates
    // from the given linked linkedList.list
    void removeDuplicates()
    {
        // Two references to head
        // temp will iterate to the
        // whole Linked List
        // prev will point towards
        // the first occurrence of every element
        Node temp = head,prev=head;
 
        // Traverse linkedList.list till the last node
        while (temp != null) {
            
           // Compare values of both pointers
           if(temp.data!=prev.data)
           {
             /* if the value of prev is
             not equal to the value of
             temp that means there are no
             more occurrences of the prev data.
             So we can set the next of
             prev to the temp node.*/
             prev.next=temp;
             prev=temp;
           }
            /*Set the temp to the next node*/
            temp=temp.next;
        }
      /*This is the edge case if there
      are more than one occurrences
      of the last element*/
      if(prev!=temp){
            prev.next=null;
        }
    }
                     
    /* Utility functions */
 
    /* Inserts a new Node at front of the linkedList.list. */
    public void push(int new_data)
    {
        /* 1 & 2: Allocate the Node &
                  Put in the data*/
        Node new_node = new Node(new_data);
  
        /* 3. Make next of new Node as head */
        new_node.next = head;
  
        /* 4. Move the head to point to new Node */
        head = new_node;
    }
 
    /* Function to print linked linkedList.list */
     void printList()
     {
         Node temp = head;
         while (temp != null)
         {
            System.out.print(temp.data+" ");
            temp = temp.next;
         } 
         System.out.println();
     }
 
     /* Driver program to test above functions */
    public static void main(String args[])
    {
        LinkedList llist = new LinkedList();
        llist.push(20);
        llist.push(13);
        llist.push(13);
        llist.push(11);
        llist.push(11);
        llist.push(11);
         
        System.out.print("List before ");
        System.out.println("removal of duplicates");
        llist.printList();
         
        llist.removeDuplicates();
         
        System.out.println("List after removal of elements");
        llist.printList();
    }
}
/* This code is contributed by Arshita */   
Python3
C#
Javascript
Output
List before removal of duplicates
11 11 11 13 13 20 
List after removal of elements
11 13 20 
 Another Approach: Using Maps

The idea is to push all the values in a map and printing its keys.

Below is the implementation of the above approach:

C++
Java
// Java program for the above approach
import java.io.*;
import java.util.*;
 
class Node
{
    int data;
    Node next;
    Node()
    {
        data = 0;
        next = null;
    }
}
class GFG
{
     
    /* Function to insert a node at
   the beginning of the linked
 * linkedList.list */
    static Node push(Node head_ref, int new_data)
    {
       
        /* allocate node */
        Node new_node = new Node();
       
        /* put in the data */
        new_node.data = new_data;
         
        /* link the old linkedList.list off
        the new node */
        new_node.next = (head_ref);
         
        /* move the head to point
        to the new node */
        head_ref = new_node;
        return head_ref;
    }
     
    /* Function to print nodes
    in a given linked linkedList.list */
    static void printList(Node node)
    {
        while (node != null)
        {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
     
    // Function to remove duplicates
    static void removeDuplicates(Node head)
    {
        HashMap<Integer, Boolean> track = new HashMap<>();
        Node temp = head;
         
        while(temp != null)
        {
            if(!track.containsKey(temp.data))
            {
                System.out.print(temp.data + " ");
            }
            track.put(temp.data , true);
            temp = temp.next;
        }
    }
     
    // Driver Code
    public static void main (String[] args)
    {
        Node head = null;
       
        /* Created linked linkedList.list will be
        11->11->11->13->13->20 */
        head = push(head, 20);
        head = push(head, 13);
        head = push(head, 13);
        head = push(head, 11);
        head = push(head, 11);
        head = push(head, 11);
        System.out.print("Linked linkedList.list before duplicate removal ");
        printList(head);
        System.out.print("\nLinked linkedList.list after duplicate removal  ");
        removeDuplicates(head);
    }
}
 
// This code is contributed by avanitrachhadiya2155
C#
Javascript
Output
Linked linkedList.list before duplicate removal 11 11 11 13 13 20
Linked linkedList.list after duplicate removal 11 13 20
Time Complexity: O(Number of Nodes)

Space Complexity: O(Number of Nodes)