The GoF Design Patterns are divided into three categories:

Creational: The design patterns that deal with the creation of an object.

Structural: Design patterns in this category deal with class structure such as Inheritance and Composition.

Behavioral: This type of design pattern provides solution for better interaction between objects, such as providing loose coupling and flexibility to easily
extend in the future.

Creational Design Patterns
There are 5 design patterns in the category of creational design patterns.

Singleton: The singleton pattern restricts the initialization of a class to ensure that only one instance of the class can be created.

Factory: The factory pattern shifts the responsibility of instantiating a class object to a Factory class.

Abstract Factory: Allows you to create a Factory for factory classes.

Builder: Creating an object step by step and a method to finally get the object instance.

Prototype: Create a new object instance from another similar instance and modify it according to our requirements.

Structural Design Patterns
There are 7 structural design patterns defined in the Gangs of Four design patterns book.

Adapter: Provides an interface between two unrelated entities so that they can work together.

Composite: Used when we have to implement a part-whole hierarchy. For example, a diagram made up of other parts like a circle, square, triangle, etc.

Proxy: Provide a placeholder or placeholder for another object to control access to it.

Flyweight: Caching and reuse of object instances, used with immutable objects. For example, string pool.

Facade: Creating wrapper interfaces over existing interfaces to help client applications.

Bridge: The bridge design pattern is used to decouple interfaces from implementation and hide implementation details from the client program.

Decorator: The decorator design pattern is used to modify the functionality of an object at runtime.

Behavioral Design Patterns
There are 11 behavioral design patterns defined in the GoF design patterns.

Template Method: used to create a template method stub and defer some of the implementation steps to subclasses.

Mediator: used to provide a centralized means of communication between different objects in a system.

Chain of Responsibility: Used to achieve loose coupling in software design, where a customer request is passed to a chain of objects to process.

Observer: useful when you are interested in the state of an object and want to be notified whenever there is any change.

Strategy: The Strategy pattern is used when we have multiple algorithms for a specific task and the client decides the actual implementation to use at runtime.

Command Command: Pattern is used to implement loose coupling in a request-response model.

State: The State design pattern is used when an object changes its behavior based on its internal state.

Visitor The Visitor pattern is used when we have to perform an operation on a group of objects of similar type.

Interpreter: Defines a grammatical representation for a language and provides an interpreter to handle that grammar.

Iterator: Used to provide a standard way to iterate through a group of objects.

Memento: The memento design pattern is used when we want to save the state of an object so that we can restore it later.

There are others, but they are creations that are not in the book, in my github examples of their use and also I looked for other patterns in java.